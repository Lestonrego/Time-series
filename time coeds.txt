tim series  best train size

import numpy as np
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error

# Target series
y = data.set_index("Year")["Consumer price index (2010 = 100)"]

best_split = 0
best_diff = float("inf")
all_results = []   # store all train/test RMSE values

for train_size in np.arange(0.5, 0.99, 0.01):
    split_idx = int(len(y) * train_size)
    y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]

    if len(y_test) < 2:   # skip if test set too small
        continue

    model = ARIMA(y_train, order=(1,2,1))
    result = model.fit()

    # Training RMSE
    fitted_vals = result.fittedvalues
    train_rmse = np.sqrt(mean_squared_error(y_train, fitted_vals))

    # Test RMSE
    preds = result.predict(start=len(y_train), end=len(y_train)+len(y_test)-1, typ="levels")
    preds.index = y_test.index
    test_rmse = np.sqrt(mean_squared_error(y_test, preds))

    # Difference
    diff = abs(train_rmse - test_rmse)

    # Save all results
    all_results.append((round(train_size,2), train_rmse, test_rmse, diff))

    # Update best
    if diff < best_diff:
        best_diff = diff
        best_split = (round(train_size, 2), train_rmse, test_rmse)

# Print all results
print("Train_Size   Train_RMSE   Test_RMSE   Diff")
for r in all_results:
    print(f"{r[0]:<10} {r[1]:<11.3f} {r[2]:<11.3f} {r[3]:.3f}")

# Print best split
print(" Best Split Found:")
print(f"Train size: {best_split[0]*100:.0f}%")
print(f"Train RMSE: {best_split[1]:.3f}")
print(f"Test RMSE : {best_split[2]:.3f}")
print(f"Difference: {best_diff:.3f}")



